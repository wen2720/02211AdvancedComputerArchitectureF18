#!/bin/bash

# This pre-push hook should prevent accidental pushing of "private" commits
# or branches that are considered work-in-progress. The script shall be used
# on the client side (placed in .git/hooks/).
# An elegant way to distribute hooks acroos multiple repos is described here:
# http://stackoverflow.com/questions/2293498/git-commit-hooks-global-settings

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

wip_grep="(^WIP|^TODO|work.in.progress)"

z40=0000000000000000000000000000000000000000

IFS=' '
while read local_ref local_sha remote_ref remote_sha
do
	if [ "$local_sha" = $z40 ]
	then
		# This is a branch delete, ignore it
		echo "pre-push: Ignoring delete"
		continue
	else
		if [ "$remote_sha" = $z40 ]
		then
			# New branch, examine all commits
			range="$local_sha"
		else
			# Update to existing branch, examine new commits
			range="$remote_sha..$local_sha"
		fi

		# Check for WIP commit
		commit=`git rev-list -n 1 -i -E --grep "$wip_grep" "$range"`
		if [ -n "$commit" ]
		then
			echo "Found work-in-progress commit message in $local_ref:"
			echo "-"
			git log -n1 $commit -i -E --grep="$wip_grep"
			echo "---"
			echo "The pre-push hook can be skipped by pushing with --no-verify."
			exit 1
		fi
	fi
done

exit 0
